{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as d3 from 'd3';\nconst FORCES = {\n  LINKS: n => {\n    return 1 / (n * 10);\n  },\n  COLLISION: 10,\n  CHARGE: -2\n};\nexport class ForceDirectedGraph {\n  constructor(nodes, links, options) {\n    this.ticker = new EventEmitter();\n    this.nodes = [];\n    this.links = [];\n    this.nodes = nodes;\n    this.links = links;\n    this.initSimulation(options);\n  }\n  // connectNodes(source, target) {\n  //   let link;\n  //   if (!this.nodes[source] || !this.nodes[target]) {\n  //     throw new Error('One of the nodes does not exist');\n  //   }\n  //   link = new Link(source, target);\n  //   this.simulation.stop();\n  //   this.links.push(link);\n  //   this.simulation.alphaTarget(0.3).restart();\n  //   this.initLinks();\n  // }\n  initNodes() {\n    if (!this.simulation) {\n      throw new Error('simulation was not initialized yet');\n    }\n    this.simulation.nodes(this.nodes);\n  }\n  initLinks() {\n    if (!this.simulation) {\n      throw new Error('simulation was not initialized yet');\n    }\n    this.simulation.force('links', d3.forceLink(this.links).id(d => d['id']).strength(FORCES.LINKS(this.nodes.length)));\n  }\n  initSimulation(options) {\n    if (!options || !options.width || !options.height) {\n      throw new Error('missing options when initializing simulation');\n    }\n    /** Creating the simulation */\n    if (!this.simulation) {\n      const ticker = this.ticker;\n      this.simulation = d3.forceSimulation().force('charge', d3.forceManyBody().strength(d => FORCES.CHARGE * d['r'])).force('collide', d3.forceCollide().strength(FORCES.COLLISION).radius(d => d['r'] + 5).iterations(2));\n      // Connecting the d3 ticker to an angular event emitter\n      this.simulation.on('tick', function () {\n        ticker.emit(this);\n      });\n      this.initNodes();\n      this.initLinks();\n    }\n    /** Updating the central force of the simulation */\n    this.simulation.force('centers', d3.forceCenter(options.width / 2, options.height / 2));\n    /** Restarting the simulation internal timer */\n    this.simulation.restart();\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}