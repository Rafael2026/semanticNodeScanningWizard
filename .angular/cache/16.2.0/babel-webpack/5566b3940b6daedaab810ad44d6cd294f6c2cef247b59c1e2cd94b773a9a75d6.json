{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport { NodeType } from 'src/app/d3';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./data-graph.service\";\nexport let DbPediaService = /*#__PURE__*/(() => {\n  class DbPediaService {\n    constructor(http, dataGraphService) {\n      this.http = http;\n      this.dataGraphService = dataGraphService;\n      // Private fields\n      this.queryLimit = 25;\n      this.timeoutms = 30000;\n      this.loading$ = new Subject();\n      // Public fields\n      this.endpoint = 'https://dbpedia.org/sparql';\n      this.language = 'EN';\n    }\n    getLoading$() {\n      return this.loading$.asObservable();\n    }\n    getInstances() {\n      this.setLoading(true);\n      this.http.get(this.endpoint + '?default-graph-uri=http://dbpedia.org&query=' + this.getInstancesQuery() + '&format=json&timeout=' + this.timeoutms).subscribe(response => {\n        let mainNode = this.dataGraphService.findNode(this.mainConceptUri);\n        response.results.bindings.forEach(b => {\n          let nuNode = this.dataGraphService.addNode(b.datanode.value, NodeType.Instance, b.datanodelabel.value);\n          this.dataGraphService.addLink(nuNode, mainNode, 'rdf:type', 'tipo');\n        });\n        this.dataGraphService.canRefreshGraph();\n        this.setLoading(false);\n      }, error => {\n        this.setLoading(false);\n      });\n    }\n    getObjectList() {\n      this.setLoading(true);\n      return this.http.get(this.endpoint + '?default-graph-uri=http://dbpedia.org&query=' + this.getObjectListQuery() + '&format=json&timeout=' + this.timeoutms).pipe(map(data => {\n        let objects = new Map();\n        data.results.bindings.forEach(o => {\n          objects.set(this.capitalizeFirstLetter(o.label.value), o.concept.value);\n        });\n        this.setLoading(false);\n        return objects;\n      }, error => {\n        this.setLoading(false);\n      }));\n    }\n    getPropertyList() {\n      this.setLoading(true);\n      return this.http.get(this.endpoint + '?default-graph-uri=http://dbpedia.org&query=' + this.getPropertyListQuery() + '&format=json&timeout=' + this.timeoutms).pipe(map(data => {\n        let properties = new Map();\n        data.results.bindings.forEach(b => {\n          properties.set(this.capitalizeFirstLetter(this.getDisplayLabel(b.property.value)), b.property.value);\n        });\n        this.setLoading(false);\n        return properties;\n      }, error => {\n        this.setLoading(false);\n      }));\n    }\n    getFilteredConcepts(filter) {\n      this.setLoading(true);\n      return this.http.get(this.endpoint + '?default-graph-uri=http://dbpedia.org&query=' + this.getFilteredConceptsQuery(filter) + '&format=json&timeout=' + this.timeoutms).pipe(map(data => {\n        let concepts = new Map();\n        data.results.bindings.forEach(b => {\n          concepts.set(this.capitalizeFirstLetter(b.label.value), b.concept.value);\n        });\n        this.setLoading(false);\n        return concepts;\n      }, error => {\n        this.setLoading(false);\n      }));\n    }\n    addMainNode(pair) {\n      this.mainConceptUri = pair[1];\n      this.dataGraphService.addNode(pair[1], NodeType.ConceptoPrincipal, pair[0]);\n    }\n    getRelations(uriNode) {\n      this.setLoading(true);\n      this.http.get(this.endpoint + '?default-graph-uri=http://dbpedia.org&query=' + this.getRelationsGivenUriNodeQuery(uriNode) + '&format=json&timeout=' + this.timeoutms).subscribe(response => {\n        let givenNode = this.dataGraphService.findNode(uriNode);\n        response.results.bindings.forEach(b => {\n          let nuNode = this.dataGraphService.addNode(b.relation.value, NodeType.SinExplorar, b.label.value);\n          this.dataGraphService.addLink(givenNode, nuNode, b.relation.value, b.label.value);\n        });\n        this.dataGraphService.canRefreshGraph();\n        this.setLoading(false);\n      }, error => {\n        this.setLoading(false);\n      });\n    }\n    getIntancesCount() {\n      this.setLoading(true);\n      this.http.get(this.endpoint + '?default-graph-uri=http://dbpedia.org&query=' + this.getNumberOfInstancesQuery() + '&format=json&timeout=' + this.timeoutms).subscribe(response => {\n        let mainNode = this.dataGraphService.findNode(this.mainConceptUri);\n        response.results.bindings.forEach(b => {\n          let nodeId = this.dataGraphService.nextNodeId();\n          let nodeName = nodeId + '/' + b.count.value;\n          let nuNode = this.dataGraphService.addNode(nodeName, NodeType.InstanceCount, b.count.value + ' instances');\n          this.dataGraphService.addLink(mainNode, nuNode, 'rdf:type', 'type');\n        });\n        this.dataGraphService.canRefreshGraph();\n        this.setLoading(false);\n      }, error => {\n        this.setLoading(false);\n      });\n    }\n    getPropertyMainConceptList() {\n      this.setLoading(true);\n      return this.http.get(this.endpoint + '?default-graph-uri=http://dbpedia.org&query=' + this.getPropertyMainConceptListQuery() + '&format=json&timeout=' + this.timeoutms).pipe(map(data => {\n        let properties = new Map();\n        data.results.bindings.forEach(b => {\n          properties.set(this.capitalizeFirstLetter(b.propertylabel.value), b.property.value);\n        });\n        this.setLoading(false);\n        return properties;\n      }, error => {\n        this.setLoading(false);\n      }));\n    }\n    getInstancePropertyValue() {\n      this.setLoading(true);\n      this.http.get(this.endpoint + '?default-graph-uri=http://dbpedia.org&query=' + this.getInstancePropertyValueQuery() + '&format=json&timeout=' + this.timeoutms).subscribe(response => {\n        response.results.bindings.forEach(b => {\n          let node = this.dataGraphService.findNode(b.datanode.value);\n          let nuNode = this.dataGraphService.addNode(b.datanode.value, NodeType.ValorPropiedadInstancia, b.value2.value);\n          this.dataGraphService.addLink(node, nuNode, this.propertyMainConceptSelected, this.propertyLabelMainConceptSelected);\n        });\n        this.dataGraphService.canRefreshGraph();\n        this.setLoading(false);\n      }, error => {\n        this.setLoading(false);\n      });\n    }\n    setLoading(isLoading) {\n      this.loading$.next(isLoading);\n    }\n    getObjectListQuery() {\n      return 'select distinct ?concept ?label where { ?mainNode a ' + encodeURIComponent('<' + this.mainConceptUri + '>') + ' . ?mainNode ' + encodeURIComponent('<' + this.relationSelected + '>') + ' ?object . ?object a ?concept. ?concept rdfs:label ?label . FILTER langMatches(lang(?label),\"' + this.language + '\") } LIMIT ' + this.queryLimit;\n    }\n    getPropertyListQuery() {\n      return 'select distinct ?property where { ?datanode ' + encodeURIComponent('<' + this.relationSelected + '>') + ' ?anotherdatanode. ?anotherdatanode a' + encodeURIComponent('<' + this.relationConceptSelected + '>') + '. ?datanode a ' + encodeURIComponent('<' + this.mainConceptUri + '>') + '. ?anotherdatanode ?property ?value. FILTER isLiteral(?value) } LIMIT ' + this.queryLimit;\n    }\n    getFilteredConceptsQuery(filter) {\n      return 'select distinct ?concept ?label where { ?x rdf:type ?concept. FILTER regex(?label, \"' + filter + '\", \"i\"). ?concept rdfs:label ?label . FILTER langMatches(lang(?label),\"' + this.language + '\") } LIMIT ' + this.queryLimit;\n    }\n    getRelationsGivenUriNodeQuery(uriNode) {\n      return 'select distinct ?relation ?label where { ?nodex ?relation ?nodey. ?nodey a ?concept. ?nodex a ' + encodeURIComponent('<' + uriNode + '>') + '. ?relation rdfs:label ?label . FILTER langMatches(lang(?label),\"' + this.language + '\")} LIMIT ' + this.queryLimit;\n    }\n    getNumberOfInstancesQuery() {\n      return 'select count (distinct *) as ?count where { ?datanode ' + encodeURIComponent('<' + this.relationSelected + '>') + ' ?anotherdatanode. ?anotherdatanode a ' + encodeURIComponent('<' + this.relationConceptSelected + '>') + '. ?datanode a ' + encodeURIComponent('<' + this.mainConceptUri + '>') + '. ?anotherdatanode ' + encodeURIComponent('<' + this.propertyConceptSelected + '>') + ' ?value. FILTER regex(?anotherdatanodelabel, \"' + this.literalTyped + '\", \"i\"). ?datanode rdfs:label ?datanodelabel . ?anotherdatanode rdfs:label ?anotherdatanodelabel . FILTER langMatches(lang(?datanodelabel),\"' + this.language + '\"). FILTER langMatches(lang(?anotherdatanodelabel),\"' + this.language + '\") }';\n    }\n    getInstancesQuery() {\n      return 'select distinct ?datanode ?datanodelabel where { ?datanode ' + encodeURIComponent('<' + this.relationSelected + '>') + ' ?anotherdatanode. ?anotherdatanode a ' + encodeURIComponent('<' + this.relationConceptSelected + '>') + '. ?datanode a ' + encodeURIComponent('<' + this.mainConceptUri + '>') + '. ?anotherdatanode ' + encodeURIComponent('<' + this.propertyConceptSelected + '>') + ' ?value. FILTER regex(?anotherdatanodelabel, \"' + this.literalTyped + '\", \"i\"). ?datanode rdfs:label ?datanodelabel . ?anotherdatanode rdfs:label ?anotherdatanodelabel . FILTER langMatches(lang(?datanodelabel),\"' + this.language + '\"). FILTER langMatches(lang(?anotherdatanodelabel),\"' + this.language + '\") }';\n    }\n    getPropertyMainConceptListQuery() {\n      return 'select distinct ?property ?propertylabel where { ?datanode ' + encodeURIComponent('<' + this.relationSelected + '>') + ' ?anotherdatanode. ?anotherdatanode a ' + encodeURIComponent('<' + this.relationConceptSelected + '>') + '. ?datanode a ' + encodeURIComponent('<' + this.mainConceptUri + '>') + '. ?anotherdatanode ' + encodeURIComponent('<' + this.propertyConceptSelected + '>') + ' ?value. FILTER regex(?anotherdatanodelabel, \"' + this.literalTyped + '\", \"i\"). ?datanode ?property ?value2. FILTER isLiteral(?value2). ?datanode rdfs:label ?datanodelabel . ?property rdfs:label ?propertylabel . ?anotherdatanode rdfs:label ?anotherdatanodelabel .  FILTER langMatches(lang(?datanodelabel),\"' + this.language + '\"). FILTER langMatches(lang(?anotherdatanodelabel),\"' + this.language + '\"). FILTER langMatches(lang(?propertylabel),\"' + this.language + '\") } LIMIT ' + this.queryLimit;\n    }\n    getDisplayLabel(uri) {\n      return uri.substr(uri.lastIndexOf('/') + 1);\n    }\n    getInstancePropertyValueQuery() {\n      return 'select distinct ?datanode ?value2 where { ?datanode ' + encodeURIComponent('<' + this.relationSelected + '>') + ' ?anotherdatanode. ?anotherdatanode a' + encodeURIComponent('<' + this.relationConceptSelected + '>') + '. ?datanode a ' + encodeURIComponent('<' + this.mainConceptUri + '>') + '. ?anotherdatanode ' + encodeURIComponent('<' + this.propertyConceptSelected + '>') + '?value. FILTER regex(?anotherdatanodelabel, \"' + this.literalTyped + '\", \"i\"). ?datanode ' + encodeURIComponent('<' + this.propertyMainConceptSelected + '>') + ' ?value2. FILTER isLiteral(?value2). ?datanode rdfs:label ?datanodelabel . ?property rdfs:label ?propertylabel . ?anotherdatanode rdfs:label ?anotherdatanodelabel .  FILTER langMatches(lang(?datanodelabel),\"' + this.language + '\"). FILTER langMatches(lang(?anotherdatanodelabel),\"' + this.language + '\"). FILTER langMatches(lang(?propertylabel),\"' + this.language + '\") }';\n    }\n    capitalizeFirstLetter(s) {\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    }\n    static #_ = this.ɵfac = function DbPediaService_Factory(t) {\n      return new (t || DbPediaService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.DataGraphService));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DbPediaService,\n      factory: DbPediaService.ɵfac\n    });\n  }\n  return DbPediaService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}