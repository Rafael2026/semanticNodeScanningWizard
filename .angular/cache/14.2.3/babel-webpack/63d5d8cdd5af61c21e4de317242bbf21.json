{"ast":null,"code":"import { NodeType, RelationState } from '../../../d3';\nimport { MatDialogConfig } from '@angular/material/dialog';\nimport { ChooseObjectDialogComponent, DialogType } from '../../dialogs/choose-object-dialog/choose-object-dialog.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/dbpedia.service\";\nimport * as i2 from \"src/app/services/data-graph.service\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = [\"nodeVisual\", \"\"];\n\nfunction NodeVisualComponent__svg_g_0__svg_circle_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"circle\", 6);\n    i0.ɵɵlistener(\"click\", function NodeVisualComponent__svg_g_0__svg_circle_1_Template__svg_circle_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r5.selectNode());\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"fill\", ctx_r1.node.color)(\"r\", ctx_r1.node.r);\n  }\n}\n\nfunction NodeVisualComponent__svg_g_0__svg_rect_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"rect\", 7);\n    i0.ɵɵlistener(\"click\", function NodeVisualComponent__svg_g_0__svg_rect_2_Template__svg_rect_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r7.selectNode());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction NodeVisualComponent__svg_g_0__svg_path_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"path\", 8);\n    i0.ɵɵlistener(\"click\", function NodeVisualComponent__svg_g_0__svg_path_5_Template__svg_path_click_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r9.onArrowClick());\n    });\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction NodeVisualComponent__svg_g_0__svg_g_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\", 9);\n    i0.ɵɵlistener(\"click\", function NodeVisualComponent__svg_g_0__svg_g_6_Template__svg_g_click_0_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const ctx_r11 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r11.selectDataNode());\n    });\n    i0.ɵɵelement(1, \"rect\", 10);\n    i0.ɵɵelementStart(2, \"text\", 11);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵattribute(\"transform\", \"translate(\" + -25 + \",\" + 20 + \")\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵattribute(\"font-size\", ctx_r4.node.fontSize);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r4.getDataButtonText(), \" \");\n  }\n}\n\nfunction NodeVisualComponent__svg_g_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"g\");\n    i0.ɵɵtemplate(1, NodeVisualComponent__svg_g_0__svg_circle_1_Template, 1, 2, \"circle\", 1);\n    i0.ɵɵtemplate(2, NodeVisualComponent__svg_g_0__svg_rect_2_Template, 1, 0, \"rect\", 2);\n    i0.ɵɵelementStart(3, \"text\", 3);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(5, NodeVisualComponent__svg_g_0__svg_path_5_Template, 1, 0, \"path\", 4);\n    i0.ɵɵtemplate(6, NodeVisualComponent__svg_g_0__svg_g_6_Template, 4, 3, \"g\", 5);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵattribute(\"transform\", \"translate(\" + ctx_r0.node.x + \",\" + ctx_r0.node.y + \")\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showCircle());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.showCircle());\n    i0.ɵɵadvance(1);\n    i0.ɵɵattribute(\"font-size\", ctx_r0.node.fontSize);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.node.displayName(), \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showArrow());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.showDataBtn());\n  }\n}\n\nexport let NodeVisualComponent = /*#__PURE__*/(() => {\n  class NodeVisualComponent {\n    constructor(dbPediaService, dataGraphService, dialog) {\n      this.dbPediaService = dbPediaService;\n      this.dataGraphService = dataGraphService;\n      this.dialog = dialog;\n    }\n\n    ngOnInit() {\n      if (this.node.type != NodeType.ConceptoPrincipal) this.linkLabelRelated = this.dataGraphService.getLinkLabelRelatedWithNode(this.node.id);\n    }\n\n    onArrowClick() {\n      if (this.node.relationState == RelationState.SinExplorar) {\n        this.dbPediaService.getRelations(this.node.name);\n        this.node.relationState = RelationState.Exploradas;\n      } else {\n        this.node.relationState = RelationState.Exploradas;\n        this.dataGraphService.setRelationNodesVisibility(false);\n      }\n    }\n\n    showArrow() {\n      return this.node.type == NodeType.ConceptoPrincipal && this.node.relationState != RelationState.Exploradas;\n    }\n\n    selectNode() {\n      if (this.node.type == NodeType.SinExplorar) {\n        this.dbPediaService.relationSelected = this.node.name;\n        this.openChooseConceptDialog();\n      } else if (this.node.type == NodeType.LiteralVacio) {\n        this.openTypeFilterDialog();\n      } else if (this.node.type == NodeType.InstanceCount) {\n        this.dataGraphService.hideNode(this.node.id);\n        this.dbPediaService.getInstances();\n      } else if (this.node.type == NodeType.Concepto) {\n        this.dbPediaService.relationSelected = this.node.name;\n        this.dataGraphService.setRelationNodesVisibility(true, this.node.id);\n      }\n    }\n\n    selectDataNode() {\n      if (this.node.type == NodeType.Concepto) {\n        this.updateQueryParameters();\n        this.openChoosePropertyDialog();\n      } else if (this.node.type == NodeType.LiteralRelleno) {\n        this.dbPediaService.getIntancesCount();\n      } else if (this.node.type == NodeType.ConceptoPrincipal) {\n        this.openChoosePropertyMainConceptDialog();\n      } else if (this.node.type == NodeType.PropiedadConceptoPrincipal) {\n        this.dataGraphService.hideNode(this.node.id);\n        this.dbPediaService.getInstancePropertyValue();\n      }\n    }\n\n    showDataBtn() {\n      return this.node.type == NodeType.Concepto || this.node.type == NodeType.LiteralRelleno || this.node.type == NodeType.ConceptoPrincipal && this.dataGraphService.IsThereVisibleInstanceNodes() || this.node.type == NodeType.PropiedadConceptoPrincipal;\n    }\n\n    openChooseConceptDialog() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.panelClass = 'custom-dialog-container';\n      dialogConfig.data = {\n        title: 'Choose a concept of ' + this.linkLabelRelated,\n        type: DialogType.PickFromList\n      };\n      this.dbPediaService.getObjectList().subscribe(response => {\n        if (response) {\n          dialogConfig.data.values = response;\n          const dialogRef = this.dialog.open(ChooseObjectDialogComponent, dialogConfig);\n          dialogRef.afterClosed().subscribe(result => {\n            if (result) {\n              this.dataGraphService.setRelationNodesVisibility(true);\n              let nuNode = this.dataGraphService.addNode(result[1], NodeType.Concepto, result[0]);\n              this.dataGraphService.copyLinkWithMainConcept(nuNode, this.node);\n              this.dbPediaService.relationConceptSelected = result[1];\n              this.dataGraphService.canRefreshGraph();\n            }\n          });\n        }\n      });\n    }\n\n    openChoosePropertyDialog() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.panelClass = 'custom-dialog-container';\n      dialogConfig.data = {\n        title: 'Choose a property of ' + this.node.label,\n        type: DialogType.PickFromList\n      };\n      this.dbPediaService.getPropertyList().subscribe(response => {\n        if (response) {\n          dialogConfig.data.values = response;\n          const dialogRef = this.dialog.open(ChooseObjectDialogComponent, dialogConfig);\n          dialogRef.afterClosed().subscribe(result => {\n            if (result) {\n              this.dbPediaService.propertyConceptSelected = result[1];\n              let nuNode = this.dataGraphService.addNode(result[1], NodeType.LiteralVacio, '');\n              this.dataGraphService.addLink(this.node, nuNode, result[1], result[0]);\n              this.dataGraphService.canRefreshGraph();\n            }\n          });\n        }\n      });\n    }\n\n    showCircle() {\n      return this.node.type != NodeType.LiteralVacio && this.node.type != NodeType.LiteralRelleno && this.node.type != NodeType.ValorPropiedadInstancia;\n    }\n\n    openTypeFilterDialog() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.panelClass = 'custom-dialog-container';\n      dialogConfig.data = {\n        title: 'Type a filter of ' + this.linkLabelRelated,\n        type: DialogType.TypeValue\n      };\n      const dialogRef = this.dialog.open(ChooseObjectDialogComponent, dialogConfig);\n      dialogRef.afterClosed().subscribe(result => {\n        if (result) {\n          this.dbPediaService.literalTyped = result;\n          this.node.label = result;\n          this.node.type = NodeType.LiteralRelleno;\n          this.dataGraphService.canRefreshGraph();\n        }\n      });\n    }\n\n    showNode() {\n      return !this.node.hidden;\n    }\n\n    openChoosePropertyMainConceptDialog() {\n      const dialogConfig = new MatDialogConfig();\n      dialogConfig.panelClass = 'custom-dialog-container';\n      dialogConfig.data = {\n        title: 'Choose a property of ' + this.node.label,\n        type: DialogType.PickFromList\n      };\n      this.dbPediaService.getPropertyMainConceptList().subscribe(response => {\n        if (response) {\n          dialogConfig.data.values = response;\n          const dialogRef = this.dialog.open(ChooseObjectDialogComponent, dialogConfig);\n          dialogRef.afterClosed().subscribe(result => {\n            if (result) {\n              this.dbPediaService.propertyLabelMainConceptSelected = result[0];\n              this.dbPediaService.propertyMainConceptSelected = result[1];\n              let nuNode = this.dataGraphService.addNode(result[1], NodeType.PropiedadConceptoPrincipal, '');\n              this.dataGraphService.addLink(this.node, nuNode, result[1], result[0]);\n              this.dataGraphService.canRefreshGraph();\n            }\n          });\n        }\n      });\n    }\n\n    getDataButtonText() {\n      let text;\n\n      switch (this.node.type) {\n        case NodeType.Concepto:\n          text = \"Property\";\n          break;\n\n        case NodeType.LiteralRelleno:\n          text = \"Search\";\n          break;\n\n        case NodeType.ConceptoPrincipal:\n          text = \"Property\";\n          break;\n\n        case NodeType.PropiedadConceptoPrincipal:\n        default:\n          text = \"Data\";\n          break;\n      }\n\n      return text;\n    }\n\n    updateQueryParameters() {\n      this.dbPediaService.relationSelected = this.dataGraphService.getRelationNameWithMainConcept(this.node);\n      this.dbPediaService.relationConceptSelected = this.node.name;\n    }\n\n  }\n\n  NodeVisualComponent.ɵfac = function NodeVisualComponent_Factory(t) {\n    return new (t || NodeVisualComponent)(i0.ɵɵdirectiveInject(i1.DbPediaService), i0.ɵɵdirectiveInject(i2.DataGraphService), i0.ɵɵdirectiveInject(i3.MatDialog));\n  };\n\n  NodeVisualComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NodeVisualComponent,\n    selectors: [[\"\", \"nodeVisual\", \"\"]],\n    inputs: {\n      node: [\"nodeVisual\", \"node\"]\n    },\n    attrs: _c0,\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"class\", \"node\", \"cx\", \"0\", \"cy\", \"0\", 3, \"click\", 4, \"ngIf\"], [\"class\", \"node\", \"x\", \"-35\", \"y\", \"-20\", \"width\", \"70\", \"height\", \"40\", \"fill\", \"rgb(162,177,219)\", 3, \"click\", 4, \"ngIf\"], [1, \"node-name\"], [\"class\", \"arrow\", \"d\", \"M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z \", \"transform\", \"translate(31,-20) rotate(180) scale(0.1,0.1)\", 3, \"click\", 4, \"ngIf\"], [\"style\", \"cursor: pointer;\", 3, \"click\", 4, \"ngIf\"], [\"cx\", \"0\", \"cy\", \"0\", 1, \"node\", 3, \"click\"], [\"x\", \"-35\", \"y\", \"-20\", \"width\", \"70\", \"height\", \"40\", \"fill\", \"rgb(162,177,219)\", 1, \"node\", 3, \"click\"], [\"d\", \"M 50,0 L 60,10 L 20,50 L 60,90 L 50,100 L 0,50 Z \", \"transform\", \"translate(31,-20) rotate(180) scale(0.1,0.1)\", 1, \"arrow\", 3, \"click\"], [2, \"cursor\", \"pointer\", 3, \"click\"], [\"rx\", \"5\", \"ry\", \"10\", \"width\", \"50\", \"height\", \"15\", 2, \"fill\", \"goldenrod\", \"stroke\", \"black\", \"stroke-width\", \"1\"], [\"x\", \"25\", \"y\", \"7.5\", 1, \"node-name\"]],\n    template: function NodeVisualComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, NodeVisualComponent__svg_g_0_Template, 7, 7, \"g\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.showNode());\n      }\n    },\n    dependencies: [i4.NgIf],\n    styles: [\".node[_ngcontent-%COMP%]{cursor:pointer;transition:stroke-width .1s ease-out,fill .1s ease-out,stroke .1s ease-out;stroke:#fff;stroke-width:.25}.node-name[_ngcontent-%COMP%]{font-family:monospace;text-anchor:middle;alignment-baseline:central;font-weight:100;fill:red}.arrow[_ngcontent-%COMP%]{fill:red;cursor:pointer}\"]\n  });\n  return NodeVisualComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}