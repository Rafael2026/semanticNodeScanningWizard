{"ast":null,"code":"import { ForceDirectedGraph } from './models';\nimport * as d3 from 'd3';\nimport * as i0 from \"@angular/core\";\nexport let D3Service = /*#__PURE__*/(() => {\n  class D3Service {\n    /** This service will provide methods to enable user interaction with elements\r\n      * while maintaining the d3 simulations physics\r\n      */\n    constructor() {}\n    /** A method to bind a pan and zoom behaviour to an svg element */\n\n\n    applyZoomableBehaviour(svgElement, containerElement) {\n      let svg, container, zoomed, zoom;\n      svg = d3.select(svgElement);\n      container = d3.select(containerElement);\n\n      zoomed = () => {\n        const transform = d3.event.transform;\n        container.attr('transform', 'translate(' + transform.x + ',' + transform.y + ') scale(' + transform.k + ')');\n      };\n\n      zoom = d3.zoom().on('zoom', zoomed);\n      svg.call(zoom);\n    }\n    /** A method to bind a draggable behaviour to an svg element */\n\n\n    applyDraggableBehaviour(element, node, graph) {\n      const d3element = d3.select(element);\n\n      function started() {\n        /** Preventing propagation of dragstart to parent elements */\n        d3.event.sourceEvent.stopPropagation();\n\n        if (!d3.event.active) {\n          graph.simulation.alphaTarget(0.3).restart();\n        }\n\n        d3.event.on('drag', dragged).on('end', ended);\n\n        function dragged() {\n          node.fx = d3.event.x;\n          node.fy = d3.event.y;\n        }\n\n        function ended() {\n          if (!d3.event.active) {\n            graph.simulation.alphaTarget(0);\n          }\n\n          node.fx = null;\n          node.fy = null;\n        }\n      }\n\n      d3element.call(d3.drag().on('start', started));\n    }\n    /** The interactable graph we will simulate in this article\r\n    * This method does not interact with the document, purely physical calculations with d3\r\n    */\n\n\n    getForceDirectedGraph(nodes, links, options) {\n      const sg = new ForceDirectedGraph(nodes, links, options);\n      return sg;\n    }\n\n  }\n\n  D3Service.ɵfac = function D3Service_Factory(t) {\n    return new (t || D3Service)();\n  };\n\n  D3Service.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: D3Service,\n    factory: D3Service.ɵfac\n  });\n  return D3Service;\n})();","map":null,"metadata":{},"sourceType":"module"}